{
  "hash": "229c6dbd1ae616904637b320ef4adf4e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R programming: packages\"\ndate: \"2025-03-21 15:47:32.589398\"\n\n\nformat:\n  html:\n    output-file: lab-pack.html\n  pdf:\n    output-file: lab-pack.pdf\n \nengine: knitr\n\nexecute: \n  eval: false\n  echo: true\n---\n\n\n\n\n::: {layout=\"[80,20]\"}\n\n::: {#first-column}\n\n|                            |\n|:---------------------------|\n| {{< var curriculum >}}     |\n| {{< var university >}}     |\n| Année {{< var year >}}     |\n| {{< var homepage >}}       |\n| {{< var moodle >}}         |\n\n\n::: \n\n::: {#second-column}\n![](/images/UniversiteParis_monogramme_couleur_RVB.png){align=\"right\" style=\"size:50px;\" width=75}\n:::\n\n:::\n\n\n\n\nThis lab is just an incentive to dig into  [R Packages (2e) by Wickham and Bryan](https://r-pkgs.org)\n\n\n\n\n## Introduction \n\nSharing/Storing/Organizing \n\n*Packages come with conventions*\n\nPackaging can be helpful to perform data analysis.\n\n## Setup\n\nAutomating package development is facilitated by a collection of packages. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstopifnot(\n  require(\"devtools\"),\n  require(\"usethis\"),\n  require(\"testthat\"),\n  require(\"styler\"),\n  require(\"roxygen2\")\n)\n```\n:::\n\n\n\n\n`devtools` is the cornerstone of the collections \n\n- with `rstudio`  (hands in hands)\n- with `vs code`\n- with `positron`\n\n\n\n \n## Package organization\n\nMake sure you understand the different states of a package : *source*, *bundled*, *binary*, *installed*, *in-memory*. \n\n- At first, we deal with a *source* package. Where is it hosted?\n- How is the source organized?\n- What are metadata for?\n- What is the purpose of file `.Rbuildignore`?\n- Why do we bundle packages?\n- \n\n[Structure and states of a package](https://r-pkgs.org/structure.html)\n\nTo initialize a package development directory.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npackpath <- \"hmw2.ma7by020\"\n\nif (!fs::dir_exists(packpath)){\n\n  fs::dir_create(packpath)\n}\n\nusethis::create_package(packpath)\n```\n:::\n\n\n\n\nWithin directory `hmw2.ma7by020`, you should have the next organization\n\n```\nhmw2.ma7by020/\n├── DESCRIPTION\n├── .gitignore\n├── hmw2.ma7by020.Rproj\n├── NAMESPACE\n├── R\n└── .Rbuildignore\n\n2 directories, 5 files\n```\n\n::: {.callout-note}\n\nWhat is the difference between *loading* and *attaching* a package?\n\n:::\n\nYou will have to \n\n- populate the `R` subdirectory\n- update `DESCRIPTION`\n\n## Reusing scripts\n\n## Styling\n\n## Testing \n\nThe workhorse of the development process is \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndevtools::load_all()\n```\n:::\n\n\n\n\n1. Code and/or fix bugs\n2. Load the code\n3. Test the code\n\n\n## Checking Package state\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndevtools::check()\n```\n:::\n\n\n\n\n\n## `NAMESPACE` and dependencies\n\n## Versioning (git)\n\n\n\n## References\n\n[Writing R extensions](https://rstudio.github.io/r-manuals/r-exts)  {{< fa brands r-project >}} {{< fa jedi >}}",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
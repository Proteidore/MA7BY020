{
  "hash": "eace515aa153c6258810c84372ffc2da",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data visualization\"\ncategories: [Visualization, Rosling, gapminder, ggplot2, Grammar of Graphics]\ndate: \"2025-01-21 13:09:01.461451\"\n\nformat:\n  html:\n    output-file: lab-gapminder.html\n  pdf:\n    include-in-header: \n      - file: macros.tex\n    output-file: lab-gapminder.pdf\n\nexecute: \n  eval: true\n  echo: true\n  collapse: true\n\n\n\n---\n\n\n\n\n::: {layout=\"[80,20]\"}\n\n::: {#first-column}\n\n|                            |\n|:---------------------------|\n| {{< var curriculum >}}     |\n| {{< var university >}}     |\n| Ann√©e {{< var year >}}     |\n| {{< var homepage >}}       |\n| {{< var moodle >}}         |\n\n\n::: \n\n::: {#second-column}\n![](/images/UniversiteParis_monogramme_couleur_RVB.png){align=\"right\" style=\"size:50px;\" width=75}\n:::\n\n:::\n\n\n\n\n\n::: {.callout-important}\n\n### Objectives\n\nThis workbook introduces visualization according to the *Grammar of Graphics* framework.  \n\nUsing `ggplot2`, we reproduce Rosling's `gapminder` talk. \n\nThis is an opportunity to develop the layered construction of graphical objects.\n\n:::\n\n\n## Grammar of Graphics\n\nWe will use the *Grammar of Graphics* approach to visualization\n\nThe expression *Grammar of Graphics* was coined by [Leiland\nWilkinson](https://en.wikipedia.org/wiki/Leland_Wilkinson) to describe a\nprincipled approach to visualization in Data Analysis (EDA)\n\nA plot is organized around tabular data (a table with rows (observations) and\ncolumns (variables))\n\nA *plot* is a *graphical object* that can be built *layer* by *layer*\n\nBuilding a graphical object consists in *chaining* elementary operations\n\nThe acclaimed TED presentation by [Hans\nRosling](https://en.wikipedia.org/wiki/Hans_Rosling) illustrates the\nGrammar of Graphics approach\n\n\n::: {.content-visible when-format=\"html\"} \n\n\n\n\n\n{{< video  https://www.youtube.com/embed/jbkSRLYSojo >}}\n\n\n\n\n\n\n:::\n\n::: {.content-visible when-format=\"pdf\"} \n\nVisit [https://www.youtube.com/embed/jbkSRLYSojo](https://www.youtube.com/embed/jbkSRLYSojo)\n\n:::\n\n\nWe will reproduce the animated demonstration using\n\n-   [`ggplot2`](https://ggplot2.tidyverse.org): an implementation of *grammar of graphics* in \\`R\n-   [`plotly`](https://plotly.com/r/): a bridge between `R` and the javascript library [`D3.js`](https://d3js.org)\n-   Using `plotly`, opting for `html` ouput, brings the possibility of\n    interactivity and animation\n\n## Setup\n\nWe will use the following packages. If needed, we install them.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstopifnot(\n  require(tidyverse), \n  require(patchwork), \n  require(glue), \n  require(ggforce), \n  require(plotly),\n  require(ggthemes),\n  require(gapminder),\n  require(ggrepel)\n)\n```\n:::\n\n\n\n\nThe data we will use can be obtained by loading package `gapminder`\n\n::: {.callout-tip}\n\n### Tip\n\nIf the packages have not yet been installed on your hard drive, install them.\n\nYou can do that using base `R` `install.packages()` function: \n\n```{.r}\ninstall.packages(\"tidyverse\")\n```\n\nIt is often faster to use functions from package `pak`\n\n```{.r}\ninstall.packages(\"pak\")\npak::pkg_install(\"tidyverse\")\n```\n\n:::\n\nYou need to understand the difference between *installing* and *loading* a package\n\n::: {.callout-note}\n\n### Question\n\n-   How do we get the list of *installed* packages?\n-   How do we get the list of *loaded* packages?\n-   Which objects are made available by a package?\n\n:::\n\n\n::: {.content-visible when-profile=\"solution\"} \n\n::: {.callout-tip title=\"solution\"} \n\nThe (usually very long)  list of installed packages can be obtained \nby a simple function call. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- installed.packages()\nhead(df)\n##             Package       LibPath                                            \n## abind       \"abind\"       \"/home/boucheron/R/x86_64-pc-linux-gnu-library/4.4\"\n## arkhe       \"arkhe\"       \"/home/boucheron/R/x86_64-pc-linux-gnu-library/4.4\"\n## arrow       \"arrow\"       \"/home/boucheron/R/x86_64-pc-linux-gnu-library/4.4\"\n## ash         \"ash\"         \"/home/boucheron/R/x86_64-pc-linux-gnu-library/4.4\"\n## AsioHeaders \"AsioHeaders\" \"/home/boucheron/R/x86_64-pc-linux-gnu-library/4.4\"\n## askpass     \"askpass\"     \"/home/boucheron/R/x86_64-pc-linux-gnu-library/4.4\"\n##             Version    Priority Depends       \n## abind       \"1.4-5\"    NA       \"R (>= 1.5.0)\"\n## arkhe       \"1.6.0\"    NA       \"R (>= 3.5)\"  \n## arrow       \"16.1.0\"   NA       \"R (>= 4.0)\"  \n## ash         \"1.0-15\"   NA       NA            \n## AsioHeaders \"1.22.1-2\" NA       NA            \n## askpass     \"1.2.0\"    NA       NA            \n##             Imports                                                                                                                \n## abind       \"methods, utils\"                                                                                                       \n## arkhe       \"graphics, methods, stats, utils\"                                                                                      \n## arrow       \"assertthat, bit64 (>= 0.9-7), glue, methods, purrr, R6, rlang\\n(>= 1.0.0), stats, tidyselect (>= 1.0.0), utils, vctrs\"\n## ash         NA                                                                                                                     \n## AsioHeaders NA                                                                                                                     \n## askpass     \"sys (>= 2.1)\"                                                                                                         \n##             LinkingTo         \n## abind       NA                \n## arkhe       NA                \n## arrow       \"cpp11 (>= 0.4.2)\"\n## ash         NA                \n## AsioHeaders NA                \n## askpass     NA                \n##             Suggests                                                                                                                                                                                                            \n## abind       NA                                                                                                                                                                                                                  \n## arkhe       \"tinytest\"                                                                                                                                                                                                          \n## arrow       \"blob, curl, cli, DBI, dbplyr, decor, distro, dplyr, duckdb\\n(>= 0.2.8), hms, jsonlite, knitr, lubridate, pillar, pkgload,\\nreticulate, rmarkdown, stringi, stringr, sys, testthat (>=\\n3.1.0), tibble, tzdb, withr\"\n## ash         NA                                                                                                                                                                                                                  \n## AsioHeaders NA                                                                                                                                                                                                                  \n## askpass     \"testthat\"                                                                                                                                                                                                          \n##             Enhances License                   License_is_FOSS\n## abind       NA       \"LGPL (>= 2)\"             NA             \n## arkhe       NA       \"GPL (>= 3)\"              NA             \n## arrow       NA       \"Apache License (>= 2.0)\" NA             \n## ash         NA       \"GPL (>= 2)\"              NA             \n## AsioHeaders NA       \"BSL-1.0\"                 NA             \n## askpass     NA       \"MIT + file LICENSE\"      NA             \n##             License_restricts_use OS_type MD5sum NeedsCompilation Built  \n## abind       NA                    NA      NA     \"no\"             \"4.4.0\"\n## arkhe       NA                    NA      NA     \"no\"             \"4.4.0\"\n## arrow       NA                    NA      NA     \"yes\"            \"4.4.0\"\n## ash         NA                    NA      NA     \"yes\"            \"4.4.0\"\n## AsioHeaders NA                    NA      NA     \"no\"             \"4.4.0\"\n## askpass     NA                    NA      NA     \"yes\"            \"4.4.0\"\n```\n:::\n\n\n\n\nNote that the output is tabular (it is a `matrix` and an `array`) that contains much more than the names of installed packages. If we just want the names of the installed packages, we can  extract the column named `Package`. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf[1:5, c(\"Package\", \"Version\") ]\n##             Package       Version   \n## abind       \"abind\"       \"1.4-5\"   \n## arkhe       \"arkhe\"       \"1.6.0\"   \n## arrow       \"arrow\"       \"16.1.0\"  \n## ash         \"ash\"         \"1.0-15\"  \n## AsioHeaders \"AsioHeaders\" \"1.22.1-2\"\n```\n:::\n\n\n\n\nMatrices and arrays represent mathematical object and are fit for computations. They are not so convenient as far as querying is concerned. Dataframes which are also tabular objects can be queried like tables in a relational database. \n\nLoading a package amounts to make a number of objects available in the current session. The objects are made available though `Namespaces`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nloadedNamespaces()\n##  [1] \"methods\"     \"graphics\"    \"plotly\"      \"utf8\"        \"generics\"   \n##  [6] \"tidyr\"       \"stringi\"     \"hms\"         \"digest\"      \"magrittr\"   \n## [11] \"evaluate\"    \"grid\"        \"timechange\"  \"grDevices\"   \"fastmap\"    \n## [16] \"jsonlite\"    \"ggrepel\"     \"tidyverse\"   \"ggthemes\"    \"httr\"       \n## [21] \"purrr\"       \"fansi\"       \"viridisLite\" \"scales\"      \"tweenr\"     \n## [26] \"codetools\"   \"lazyeval\"    \"cli\"         \"rlang\"       \"polyclip\"   \n## [31] \"munsell\"     \"withr\"       \"utils\"       \"yaml\"        \"stats\"      \n## [36] \"tools\"       \"base\"        \"tzdb\"        \"dplyr\"       \"colorspace\" \n## [41] \"ggplot2\"     \"forcats\"     \"vctrs\"       \"R6\"          \"lifecycle\"  \n## [46] \"lubridate\"   \"stringr\"     \"htmlwidgets\" \"MASS\"        \"pkgconfig\"  \n## [51] \"pillar\"      \"gtable\"      \"glue\"        \"data.table\"  \"Rcpp\"       \n## [56] \"ggforce\"     \"xfun\"        \"tibble\"      \"tidyselect\"  \"knitr\"      \n## [61] \"farver\"      \"datasets\"    \"gapminder\"   \"htmltools\"   \"patchwork\"  \n## [66] \"rmarkdown\"   \"readr\"       \"compiler\"\n```\n:::\n\n\n\n\nNote that we did not load explicitly some of the `loadedNamespaces`.\nMany of the loaded packages were loaded while loading other packages, for \nexample metapackages like `tidyverse`. \n\n:::\n\n:::\n\n## Have a look at `gapminder` dataset\n\nThe `gapminder` table can be found at `gapminder::gapminder`\n\n-   A table has a *schema*: a list of named *columns*, each with a given type\n-   A table has a *content*: *rows*. Each row is a collection of items,  corresponding to the columns\n\n\n::: {.callout-note}\n\n\n### Question\n\nExplore `gapminder::gapminder`, using `glimpse()`  and `head()`\n\n- `glimpse()` allows to see the schema and the first rows\n- `head()` allows to see the first rows\n- Use the pipe `|>` to chain operations\n\n:::\n\n\n\n::: {.content-visible when-profile=\"solution\"} \n\n::: {.callout-tip title=\"solution\"} \n\nDataframes \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder <- gapminder::gapminder\n\nglimpse(gapminder)\n## Rows: 1,704\n## Columns: 6\n## $ country   <fct> \"Afghanistan\", \"Afghanistan\", \"Afghanistan\", \"Afghanistan\", ~\n## $ continent <fct> Asia, Asia, Asia, Asia, Asia, Asia, Asia, Asia, Asia, Asia, ~\n## $ year      <int> 1952, 1957, 1962, 1967, 1972, 1977, 1982, 1987, 1992, 1997, ~\n## $ lifeExp   <dbl> 28.801, 30.332, 31.997, 34.020, 36.088, 38.438, 39.854, 40.8~\n## $ pop       <int> 8425333, 9240934, 10267083, 11537966, 13079460, 14880372, 12~\n## $ gdpPercap <dbl> 779.4453, 820.8530, 853.1007, 836.1971, 739.9811, 786.1134, ~\n\ngapminder |>  \n  glimpse()\n## Rows: 1,704\n## Columns: 6\n## $ country   <fct> \"Afghanistan\", \"Afghanistan\", \"Afghanistan\", \"Afghanistan\", ~\n## $ continent <fct> Asia, Asia, Asia, Asia, Asia, Asia, Asia, Asia, Asia, Asia, ~\n## $ year      <int> 1952, 1957, 1962, 1967, 1972, 1977, 1982, 1987, 1992, 1997, ~\n## $ lifeExp   <dbl> 28.801, 30.332, 31.997, 34.020, 36.088, 38.438, 39.854, 40.8~\n## $ pop       <int> 8425333, 9240934, 10267083, 11537966, 13079460, 14880372, 12~\n## $ gdpPercap <dbl> 779.4453, 820.8530, 853.1007, 836.1971, 739.9811, 786.1134, ~\n\ngapminder |> \n  head()\n## # A tibble: 6 x 6\n##   country     continent  year lifeExp      pop gdpPercap\n##   <fct>       <fct>     <int>   <dbl>    <int>     <dbl>\n## 1 Afghanistan Asia       1952    28.8  8425333      779.\n## 2 Afghanistan Asia       1957    30.3  9240934      821.\n## 3 Afghanistan Asia       1962    32.0 10267083      853.\n## 4 Afghanistan Asia       1967    34.0 11537966      836.\n## 5 Afghanistan Asia       1972    36.1 13079460      740.\n## 6 Afghanistan Asia       1977    38.4 14880372      786.\n```\n:::\n\n\n\n\nEven an empty dataframe has a scheme:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |> \n  head(0) |> \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 0\nColumns: 6\n$ country   <fct> \n$ continent <fct> \n$ year      <int> \n$ lifeExp   <dbl> \n$ pop       <int> \n$ gdpPercap <dbl> \n```\n\n\n:::\n\n```{.r .cell-code}\n# glimpse(head(gapminder, 0))\n```\n:::\n\n\n\n\n:::\n\n:::\n\n\n\n::: {.content-visible when-profile=\"solution\"} \n\n::: {.callout-tip title=\"solution\"}\n\nThe schema of a dataframe/tibble is the list of column names and\nclasses. The content of a dataframe is made of the rows. A dataframe may\nhave null content\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |> \n  filter(FALSE) |> \n  glimpse()\n## Rows: 0\n## Columns: 6\n## $ country   <fct> \n## $ continent <fct> \n## $ year      <int> \n## $ lifeExp   <dbl> \n## $ pop       <int> \n## $ gdpPercap <dbl>\n```\n:::\n\n\n\n\n:::\n\n:::\n\n## Get a feeling of the dataset\n\n::: {.callout-note}\n\n### Question\n\nPick two random rows for each continent using `slice_sample()`\n\n\n:::\n\n::: {.content-visible when-profile=\"solution\"} \n\n::: {.callout-tip title=\"solution\"}\n\nTo pick a slice at random, we can use function `slice_sample`. We can even \nperform sampling within groups defined by the value of a column.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |> \n  slice_sample(n=2, by=continent)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 x 6\n   country        continent  year lifeExp      pop gdpPercap\n   <fct>          <fct>     <int>   <dbl>    <int>     <dbl>\n 1 Oman           Asia       1957    40.1   561977     2243.\n 2 Korea, Rep.    Asia       2002    77.0 47969150    19234.\n 3 Hungary        Europe     1957    66.4  9839000     6040.\n 4 Czech Republic Europe     1962    69.9  9620282    10137.\n 5 Mali           Africa     1967    38.5  5212416      545.\n 6 Togo           Africa     1957    41.2  1357445      926.\n 7 Nicaragua      Americas   1987    62.0  3344353     2956.\n 8 Brazil         Americas   1957    53.3 65551171     2487.\n 9 Australia      Oceania    1977    73.5 14074100    18334.\n10 Australia      Oceania    1962    70.9 10794968    12217.\n```\n\n\n:::\n\n```{.r .cell-code}\n#< or equivalently \n# gapminder |> \n#   group_by(continent) |> \n#   slice_sample(n=2)\n```\n:::\n\n\n\n\n:::\n\n:::\n\n\n::: {.callout-note}\n\n### Question\n\nWhat makes a table *tidy*?\n\n:::\n\n::: {.callout-tip}\n\n### Tip \n\nHave a look at [Data tidying in R for Data Science (2nd\ned.)](https://r4ds.hadley.nz/data-tidy.html)\n\n:::\n\n::: {.callout-note}\n\n### Question\n\nIs the `gapminder` table redundant?\n\n:::\n\n\n::: {.content-visible when-profile=\"solution\"} \n\n::: {.callout-tip title=\"solution\"}\n\n`gapminder` is redundant: column `country` completely determines the content of \ncolumn `continent`. In database parlance, we have a functional dependancy: `country ‚Üí continent` whereas the *key* of the table is made of columns `country, year`. \n\nTable `gapminder` is not in Boyce-Codd Normal Form (BCNF), not even in Third Normal Form (3NF).\n\n:::\n\n:::\n\n## Gapminder tibble (extract)\n\n::: {.callout-note}\n\n### Question\n\nExtract/filter a subset of rows using `dplyr::filter(...)`\n\n- All rows concerning a given country\n- All rows concerning a year\n- All rows concerning a given continnent and a year\n  \n:::\n\n::: {.content-visible when-profile=\"solution\"} \n\n::: {.callout-tip title=\"solution\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# q: in gapminder table extract all raws concerning France\n\ngapminder |> \n  filter(country=='France') |> \n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 x 6\n  country continent  year lifeExp      pop gdpPercap\n  <fct>   <fct>     <int>   <dbl>    <int>     <dbl>\n1 France  Europe     1952    67.4 42459667     7030.\n2 France  Europe     1957    68.9 44310863     8663.\n3 France  Europe     1962    70.5 47124000    10560.\n4 France  Europe     1967    71.6 49569000    13000.\n5 France  Europe     1972    72.4 51732000    16107.\n6 France  Europe     1977    73.8 53165019    18293.\n```\n\n\n:::\n:::\n\n\n\n\n\n\n:::\n\n::: {.callout-caution}\n\n::: {.content-hidden unless-format=\"html\"}\n\n### {{< fa triangle-exclamation >}}\n\n:::\n\nEquality testing is performed using `==`, not `=` (which is used to implement assignment)\n\n:::\n\n:::\n\n\n## Filtering (selection $œÉ$ from database theory) : Picking one year of data\n\n\nThere is simple way to filter rows satisfying some condition. It consists \nin mimicking indexation in a matrix, leaving the colum index empty, replacing \nthe row index by a condition statement (a logical expression) also called a mask.  \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# q: in gapminder table extract all raws concerning year 2002\n\ngapminder_2002 <- gapminder |>\n  filter(year==2002)  # \n\ngapminder_2002 <- gapminder[gapminder$year==2002,]\n```\n:::\n\n\n\n\n\nHave a look at \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder$year==2002\n```\n:::\n\n\n\n\nWhat is the type/class of this expression?\n\n\nThis is possible in base `R` and very often convenient. \n\nNevertheless, this way of performing row filtering does not emphasize the connection between the dataframe  and the condition. Any logical vector with the right length could be used as a mask. Moreover, this way of performing filtering is not very functional.\n\n\n\n::: {.callout-note collapse=\"true\"}\n\nIn the parlance of Relational Algebra, `filter` performs a *selection*\nof rows. Relational expression\n\n$$œÉ_{\\text{condition}}(\\text{Table})$$ \n\ntranslates to\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(Table, condition)\n```\n:::\n\n\n\n\nwhere $\\text{condition}$ is a boolean expression that can be evaluated\non each row of $\\text{Table}$. In `SQL`, the relational expression would\ntranslate into\n\n\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT \n  *\nFROM \n  Table\nWHERE \n  condition\n```\n:::\n\n\n\n\nCheck [Package `dplyr`\ndocs](https://www.rdocumentation.org/packages/dplyr/versions/0.7.8/topics/filter)\n\nThe `posit` cheatsheet on `dplyr` is an unvaluable resource for table manipulation.\n\n:::\n\nUse `dplyr::filter()` to perform row filtering\n\n::: {.content-visible when-profile=\"solution\"} \n\n::::: {.callout-tip title=\"solution\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# filter(gapminder, year==2002)\n\ngapminder |> \n  filter(year==2002)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 142 x 6\n   country     continent  year lifeExp       pop gdpPercap\n   <fct>       <fct>     <int>   <dbl>     <int>     <dbl>\n 1 Afghanistan Asia       2002    42.1  25268405      727.\n 2 Albania     Europe     2002    75.7   3508512     4604.\n 3 Algeria     Africa     2002    71.0  31287142     5288.\n 4 Angola      Africa     2002    41.0  10866106     2773.\n 5 Argentina   Americas   2002    74.3  38331121     8798.\n 6 Australia   Oceania    2002    80.4  19546792    30688.\n 7 Austria     Europe     2002    79.0   8148312    32418.\n 8 Bahrain     Asia       2002    74.8    656397    23404.\n 9 Bangladesh  Asia       2002    62.0 135656790     1136.\n10 Belgium     Europe     2002    78.3  10311970    30486.\n# i 132 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n\n:::::\n\n::: {.callout-important}\n\n### Data masking\n\nNote that in stating the condition, we simply write `year==2002` even though \n`year` is not the name of an object in our current session. This is possible because `filter( )` uses *data masking*, `year` is meant to denote a column in `gapminder`. SQL interpreters use the same mechanism.\n\nThe ability to use data masking is one of the great strengths of the `R` programming language.\n\n:::\n\n\n:::\n\n## Static plotting: First attempt\n\n::: {.callout-note}\n\n### Question\n\nDefine a plot with respect to `gapminder_2002` along the lines suggested \nby Rosling's presentation. \n\n:::\n\n::: {.content-visible when-profile=\"solution\"} \n\n::: {.callout-tip title=\"solution\"}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- gapminder_2002 |>\n  ggplot() \n```\n:::\n\n\n\n\n:::\n\n:::\n\n::: {.callout-note collapse=\"true\"}\n\nYou should define a `ggplot` object with data layer `gapminder_2022` and call this object `p` for further reuse.\n\n:::\n\n::: {.callout-note}\n\n### Question\n\nMap variables `gdpPercap` and `lifeExp` to axes `x` and `y`. Define the axes. \nIn `ggplot2` parlance, this is called *aesthetic mapping*.  Use `aes()`.\n\n:::\n\n::: {.content-visible when-profile=\"solution\"} \n\n::: {.callout-tip title=\"solution\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# q: Map variables gdpPercap and lifeExp to axes x and y. Define the axes.\np <- p +\n  aes(x=gdpPercap, y=lifeExp)\n\np \n```\n\n::: {.cell-output-display}\n![](lab-gapminder_files/figure-pdf/b√•d-1stlayer-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n:::\n\n:::\n\n::: {.callout-note collapse=\"true\"}\n\nUse `ggplot` object `p` and add a global aesthetic mapping `gdpPercap`\nand `lifeExp` to axes `x` and `y` (using `+` from `ggplot2`) .\n\n:::\n\n::: {.callout-note}\n\n### Question\n\nFor each row, draw a point at coordinates defined by the mapping. \nYou need to add a `geom_` layer to your `ggplot` object, in this case\n`geom_point()` will do.\n\n\n:::\n\n::: {.content-visible when-profile=\"solution\"} \n\n::: {.callout-tip title=\"solution\"}\n\nWe add another layer to our graphical object.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- p +\n  geom_point()\n\np\n```\n\n::: {.cell-output-display}\n![](lab-gapminder_files/figure-pdf/bad-2ndlayer-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n:::\n\n:::\n\n::: {.callout-note}\n\n### What's up?\n\nWe are building a graphical object (a `ggplot` object) around a data\nframe (`gapminder`)\n\nWe supply *aesthetic mappings* (`aes()`) that can be either global or\nspecifically bound to some *geometries* (`geom_point()`) or *statistics*\n\nThe global aesthetic mapping defines which columns (variables) are\n\n-   mapped to position (which columns are mapped to axes),\n-   possibly mapped to colours, linetypes, shapes, ...\n\nGeometries and Statistics describe the building blocks of graphics\n\n:::\n\n\n### What's missing here?\n\nwhen comparing to the Gapminder demonstration, we can spot that\n\n-   colors are missing \n-   bubble sizes are all the same. They should reflect the population\n    size of the country\n-   titles and legends are missing. This means the graphic object is\n    useless.\n\nWe will add other layers to the graphical object to complete the plot\n\n## Second attempt: display more information\n\n::: {.callout-note}\n\n### Question\n\n-   Map `continent` to color (use `aes()`)\n-   Map `pop` to bubble size (use `aes()`)\n-   Make point transparent by tuning `alpha` (inside `geom_point()`\n    avoid *overplotting*)\n\n\n:::\n\n::: {.content-visible when-profile=\"solution\"} \n\n::: {.callout-tip title=\"solution\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- p +\n  aes(color=continent, size=pop) +\n  geom_point(alpha=.5) \n\np\n```\n\n::: {.cell-output-display}\n![](lab-gapminder_files/figure-pdf/better-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\nNote that we only use global aesthetic mappings. This makes sense since we do not need to taylor aesthetics to specific geometries. Indeed we only have one geometry in our graphical object.\n\n:::\n:::\n\n::: {.content-visible when-profile=\"solution\"} \n\n::: {.callout-tip title=\"solution\"}\n\nIn this enrichment of the graphical object, *guides* have been\nautomatically added for two aesthetics: `color` and `size`. Those two\nguides are deemed necessary since the reader has no way to guess the\nmapping from the five levels of `continent` to color (the color scale),\nand the reader needs help to connect population size and bubble size.\n\n`ggplot2` provides us with helpers to fine tune guides.\n\nThe scalings on the `x` and `y` axis do not deserve guides: the ticks\nalong the coordinate axes provide enough information.\n\n:::\n:::\n\n## Scaling\n\nTo pay tribute to Hans Rosling, we need to take care of two\n*scaling* issues:\n\n-   the gdp per capita axis should be *logarithmic* `scale_x_log10()`\n-   the *area* of the point should be proportional to the population\n    `scale_size_area()`\n\n::: {.callout-note}\n\n### Complete the graphical object accordingly\n\n:::\n\n::: {.content-visible when-profile=\"solution\"} \n\n::: {.callout-tip title=\"solution\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# q: use logarithmic scale for both axes\np <- p +\n  scale_x_log10() +\n##  scale_size_area() +\n  ggtitle(\"Gapminder 2002, scaled\")\n\np\n```\n\n::: {.cell-output-display}\n![](lab-gapminder_files/figure-pdf/better-with-scaling-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n\n:::\n\n:::\n\n\n::: {.callout-note}\n\n### Question\n\nMotivate the proposed scalings.\n\n-   Why is it important to use logarithmic scaling for gdp per capita?\n-   When is it important to use logarithmic scaling on some axis (in\n    other contexts)?\n-   Why is it important to specify `scale_size_area()` ?\n\n:::\n\n::: {.content-visible when-profile=\"solution\"} \n\n::: {.callout-tip title=\"solution\"}\n\nTo see why using `scale_size_area()` is important, we can check what happens when we use `scale_size()` instead.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop_range <- c(0, max(gapminder_2002$pop))\n\np +\n  scale_radius(limits = pop_range) + \n  ggtitle(\"scale_radius\")\n```\n\n::: {.cell-output-display}\n![](lab-gapminder_files/figure-pdf/better-with-bad-scaling-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\nWith `scale_size_area()`, the area of the point is proportional to the value of the variable mapped to `size`. With `scale_size()`, the radius of the point is proportional to the value of the variable mapped to `size`, so the area is proportional to the square of the value of the variable. This tends to exaggerate the differences between the sizes of the points. This is a way of lying with statistics.\n\n:::\n\n:::\n\n::: {.content-visible when-profile=\"solution\"} \n\n::: {.callout-tip title=\"solution\"}\n\nWe use package `patchwork` to collect and present several graphical objects.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nptchwrk <- (\n  p + \n  scale_size(limits = pop_range) + \n  ggtitle(\"scale_size\")) + \n  (p + \n  scale_radius(limits = pop_range) + \n  ggtitle(\"scale_radius\")) \n\nptchwrk + plot_annotation(\n  title='Comparing scale_size and scale_radius', \n  caption='In the current setting, scale_size() should be favored'\n)\n```\n\n::: {.cell-output-display}\n![](lab-gapminder_files/figure-pdf/better-with-bad-scaling-patchwork-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nAccording to the documentation, `scale_size_area()` ensures that a value of $0$ is mapped to a size of $0$. This is not the case with `scale_size()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nptchwrk <- (\n  p + \n  scale_size(limits = pop_range) + \n  ggtitle(\"scale_size\")) + \n  (p + \n  scale_size_area() + \n  ggtitle(\"scale_size_area\")) \n\nptchwrk + plot_annotation(\n  title='Comparing scale_size and scale_size_area', \n  caption='In the current setting, scale_size_area() should be favored'\n)\n```\n\n::: {.cell-output-display}\n![](lab-gapminder_files/figure-pdf/even-better-with-scaling-1.pdf){fig-pos='H'}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np <- p + \n  scale_size_area() \n```\n:::\n\n\n\n\n:::\n\n:::\n\n\n## In perspective\n\n::: {.callout-note}\n\n### Question\n\nUsing copilots completions, we can summarize the construcion of the graphical object in a series of questions.\n\n```\n# q: Define a plot with respect to table gapminder_2002 along the lines suggested by Rosling's TED presentation\n# q: Map variables gdpPercap and lifeExp to axes x and y. Define the axes. \n# q: For each row, draw a point at coordinates defined by the mapping.\n# q: Map continent to color\n# q: Map pop to bubble size\n# q: Make point transparent by tuning alpha (inside geom_point() avoid overplotting)\n# q: Add a plot title\n# q: Make axes titles explicit and readable\n# q: Use labs(...)  \n# q: Use scale_x_log10() and scale_size_area()\n# q: Fine tune the guides: replace pop by Population and titlecase continent\n# q: Use theme_minimal()\n# q: Use scale_color_manual(...) to fine tune the color aesthetic mapping.\n# q: Use facet_zoom() from package ggforce\n# q: Add labels to points. This can be done by aesthetic mapping. Use aes(label=..)\n```\n\n\n:::\n\n::: {.content-visible when-profile=\"solution\"} \n\n::: {.callout-tip title=\"solution\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyoi <- 2002\n\np <-  p + \n  labs(\n    title=glue('The world in year {yoi}'),\n    x=\"Gross Domestic Product per capita (US$ 2009, corrected for PPP)\",\n    y=\"Life expectancy at birth\"\n  )\n\np\n```\n\n::: {.cell-output-display}\n![](lab-gapminder_files/figure-pdf/title-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n:::\n\n:::\n\n::: {.content-visible when-profile=\"solution\"} \n\n::: {.callout-tip title=\"solution\"}\n\nWe should also fine tune the guides: replace `pop` by `Population` and\ntitlecase `continent`.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# q: fine tune the guides: replace `pop` by `Population` and titlecase `continent`.\np <- p +\n  guides(color = guide_legend(title = \"Continent\",\n                              override.aes = list(size = 5),\n                              order = 1),\n         size = guide_legend(title = \"Population\",\n                             order = 2))\n```\n:::\n\n\n\n\n:::\n\n:::\n\n::: {.callout-note}\n\n### Question\n\nWhat should be the respective purposes of Title, Subtitle, Caption, ... ?\n\n:::\n\n\n::::: {.content-visible when-profile=\"solution\"}  \n\n::: {.callout-tip title=\"solution\"}\n\n-   The title should be explicit and concise. It should summarize the\n    content of the graphic object. Our title here \"The world in year 2002\" is concise but not explicit enough. The world may signify widely different things. Here, we mean world countries\n\n-   The subtitle should provide additional information: \"Public health does not boil down to GDP per capita\"\n\n-   The caption should provide additional information. Here we could explain the meaning of the axes, the color scale, the size scale, ... provided guides are not enough. Here we could spot the source(s) of the data: UNO, WHO, World Bank, ..., Gapminder foundation.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- p +\n  labs(\n    subtitle=\"Public health does not boil down to GDP per capita\",\n    caption=\"Source: Gapminder Foundation through Gapminder package\"\n  )\np\n```\n\n::: {.cell-output-display}\n![](lab-gapminder_files/figure-pdf/title-subtitle-caption-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n::: \n:::::\n\n## Theming using `ggthemes` (or not)\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstopifnot(\n  require(\"ggthemes\")\n)\n```\n:::\n\n\n\n\n\nA theme defines the *look and feel* of plots\n\nWithin a single document, we should use only one theme\n\nSee [Getting the\ntheme](https://ggplot2.tidyverse.org/reference/theme_get.html) for a\ngallery of available themes\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np +\n  theme_economist()\n```\n\n::: {.cell-output-display}\n![](lab-gapminder_files/figure-pdf/theme_economist-out-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n## Tuning scales\n\n\n::: {.callout-note}\n\n### Question\n\nUse `scale_color_manual(...)` to fine tune the color aesthetic mapping.\n\n\n:::\n\n\n::: {.content-visible when-profile='solution'} \n\n::: {.callout-tip}\n\n### Solution\n\n\n\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: theme_scale\nneat_color_scale <-\n      c(\"Africa\" = \"#01d4e5\",\n        \"Americas\" = \"#7dea01\" ,\n        \"Asia\" = \"#fc5173\",\n        \"Europe\" = \"#fde803\",\n        \"Oceania\" = \"#536227\")\n```\n````\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np <- p +\n  scale_size_area(max_size = 15) + #<<\n  scale_color_manual(values = neat_color_scale) #<<\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nScale for size is already present.\nAdding another scale for size, which will replace the existing scale.\n```\n\n\n:::\n\n```{.r .cell-code}\np\n```\n\n::: {.cell-output-display}\n![](lab-gapminder_files/figure-pdf/manual_color_scaling-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n:::\n\n:::\n\n::: {.callout-tip collapse=\"false\"}\n\n### Tip\n\nChoosing a color scale is a difficult task\n\n`viridis` is often a good pick.\n\n:::\n\n::: {.content-visible when-profile=\"solution\"} \n\n::: {.callout-tip title=\"solution\"}\n\nMimnimalist themes are often a good pick.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nold_theme <- theme_set(theme_minimal())\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np <- p +\n   scale_size_area(max_size = 15,\n                  labels= scales::label_number(scale=1/1e6,\n                                               suffix=\" M\")) +\n   scale_color_manual(values = neat_color_scale) +\n    labs(title= glue(\"Gapminder  {min(gapminder$year)}-{max(gapminder$year)}\"),\n         x = \"Yearly Income per Capita\",\n         y = \"Life Expectancy\",\n       caption=\"From sick  and poor (bottom left) to healthy and rich (top right)\")   \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nScale for size is already present.\nAdding another scale for size, which will replace the existing scale.\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\n```\n\n\n:::\n\n```{.r .cell-code}\np + theme(legend.position = \"none\") \n```\n\n::: {.cell-output-display}\n![](lab-gapminder_files/figure-pdf/full-monty-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n:::\n\n:::\n\n::::::: {.content-hidden when-profile=\"miashs\"}\n\n## Zooming on a continent\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nzoom_continent <- 'Europe'  # choose another continent at your convenience \n```\n:::\n\n\n\n\n::: {.callout-tip collapse=\"true\"}\n\nUse `facet_zoom()` from package `ggforce`\n\n:::\n\n::: {.content-visible when-profile=\"solution\"} \n\n::: {.callout-tip title=\"solution\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstopifnot(\n  require(\"ggforce\") #<<\n)\n\np_zoom_continent <- p + \n  facet_zoom( #<<\n    xy= continent==zoom_continent, #<<\n    zoom.data= continent==zoom_continent #<<\n    ) #<<\n\np_zoom_continent\n```\n\n::: {.cell-output-display}\n![](lab-gapminder_files/figure-pdf/zoom_continent-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n:::\n\n:::\n\n:::::::\n\n## Adding labels\n\n::: {.callout-note}\n\n### Question\n\nAdd labels to points. This can be done by aesthetic mapping.\nUse `aes(label=..)`\n\nTo avoid text cluttering, package `ggrepel` offers interesting tools.\n\n:::\n\n::: {.content-visible when-profile=\"solution\"} \n\n::: {.callout-tip title=\"solution\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstopifnot(\nrequire(ggrepel) #<<\n)\n\np +\n   aes(label=country) + #<<\n   ggrepel::geom_label_repel(max.overlaps = 5) + #<<\n   scale_size_area(max_size = 15,\n                  labels= scales::label_number(scale=1/1e6,\n                                               suffix=\" M\"))  #+\n```\n\n::: {.cell-output-display}\n![Gapminder 2002 layer by layer](lab-gapminder_files/figure-pdf/plot_gap_minder_2002_labelled-1.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n  # scale_color_manual(values = neat_color_scale) +\n  # theme(legend.position = \"none\") +\n    # labs(title= glue(\"Gapminder  {min(gapminder$year)}-{max(gapminder$year)}\"),\n    #      x = \"Yearly Income per Capita\",\n    #      y = \"Life Expectancy\",\n    #    caption=\"From sick  and poor (bottom left) to healthy and rich (top right)\")\n```\n:::\n\n\n\n\n:::\n\n:::\n\n::::::: {.content-hidden when-profile=\"miashs\"}\n\n## Facetting\n\nSo far we have only presented one year of data (2002)\n\nRosling used an *animation* to display the flow of time\n\nIf we have to deliver a printable report, we cannot rely on animation,\nbut we can rely on *facetting*\n\nFacets are collections of small plots constructed in the same way on\nsubsets of the data\n\n::: {.callout-note}\n\n### Question\n\nAdd a layer to the graphical object using `facet_wrap()`\n\n:::\n\n\n::: {.content-visible when-profile=\"solution\"} \n\n::: {.callout-tip title=\"solution\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- p +\n  aes(text=country) +\n  guides(color = guide_legend(title = \"Continent\",\n                              override.aes = list(size = 5),\n                              order = 1),\n         size = guide_legend(title = \"Population\",\n                             order = 2)) +\n  theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1)) +\n  facet_wrap(vars(year), ncol=6) +\n  ggtitle(\"Gapminder 1952-2007\")\n\np\n```\n\n::: {.cell-output-display}\n![](lab-gapminder_files/figure-pdf/facet-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n:::\n\n:::\n\n\n::: {.callout-message collapse=\"true\"}\nAs all rows in `gapminder_2002` are all related to `year` 2002, we need\nto rebuild the graphical object along the same lines (using the same\n*graphical pipeline*) but starting from the whole `gapminder` dataset.\n\nShould we do this using *cut and paste*?\n\n{{< fa skull-crossbones >}} No!!!\n\n:::\n\n::: {.callout-important}\n\n### Don't Repeat Yoursel (DRY)\n\n> Abide to the DRY principle using operator `%+%`: the `ggplot2` object\n> `p` can be fed with another dataframe and all you need is proper\n> facetting.\n\n:::\n\n\n::: {.content-visible when-profile=\"solution\"} \n\n::: {.callout-tip title=\"solution\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np %+% gapminder\n```\n\n::: {.cell-output-display}\n![](lab-gapminder_files/figure-pdf/dryit-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n:::\n\n:::\n\n:::::::\n\n## Animate for free with `plotly`\n\n::: {.callout-note}\n\n### Question\n\nUse `plotly::ggplotly()` to create a Rosling like animation. \n\nUse `frame` aesthetics.\n\n:::\n\n::: {.content-visible when-profile=\"solution\"} \n\n::: {.callout-tip title=\"solution\"}\n\n\n\n\n::: {.cell code-annotations='hover'}\n\n````{.cell-code}\n```{{r}}\n#| label: animate\n#| eval: !expr knitr::is_html_output()\n#| code-annotations: hover\n\nq <- filter(gapminder, FALSE) |>\n   ggplot() +\n   aes(x = gdpPercap) +\n   aes(y = lifeExp) +\n   aes(size = pop) +\n   aes(text = country) +                   #\n   aes(fill = continent) +\n   # aes(frame = year) +                     #\n  geom_point(alpha=.5, colour='black') +\n  scale_x_log10() +\n  scale_size_area(max_size = 15,\n                  labels= scales::label_number(scale=1/1e6,\n                                               suffix=\" M\")) +\n  scale_fill_manual(values = neat_color_scale) +\n  theme(legend.position = \"none\") +\n  labs(title= glue(\"Gapminder  {min(gapminder$year)}-{max(gapminder$year)}\"),\n       x = \"Yearly Income per Capita\",\n       y = \"Life Expectancy\",\n       caption=\"From sick  and poor (bottom left) to healthy and rich (top right)\")\n\n\n(q %+% gapminder) |>\n  plotly::ggplotly(height = 500, width=750)   \n```\n````\n:::\n\n\n\n1. `text` will be used while *hovering*\n2. `frame` is used by `plotly` to drive the animation. One `frame` per year\n\n:::\n\n:::\n\n::: {.content-visible when-profile=\"solution\"} \n\n::: {.callout-tip title=\"solution\"}\n\n\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| eval: !expr knitr::is_html_output()\n\n(p %+% gapminder +\n facet_null() +\n aes(frame=year)) |>\n plotly::ggplotly(height = 500, width=750)\n```\n````\n:::\n\n\n\n\n:::\n\n:::\n\n## Suggestions\n\nThink about ways to visualize specific aspects of the gapminder data. \n\n- How could you overlay the world in 1952 and 2007?\n- How could you visualize the evolution of life expectancy and population across the different countries?\n- Visualize the evolution of former colonies and their colonizers.\n- Visualize the evolution of countries from the former Soviet Union, Warsaw Pact, and Yugoslavia.\n- Visualize the evolution of countries from the former British Empire.\n\n\n\n## More material\n\n::: {.content-visible when-format=\"html\"} \n\n\n\n\n\n{{< video https://www.youtube.com/embed?v=3_ZqrTsaO4k&list=PL4IzsxWztPdnCC_kMCYKrd_t6cViMhBrD&index=12 >}}\n\n\n\n\n\n\n:::\n\n\n\n::: {.content-visible when-format=\"pdf\"} \n\nVisit [Data visualization using ggplot2 and its extensions, UseR 2021 Tutorial](https://www.youtube.com/embed?v=3_ZqrTsaO4k&list=PL4IzsxWztPdnCC_kMCYKrd_t6cViMhBrD&index=12)\n\n:::\n\n\nRead [Visualization in R for Data Science](https://r4ds.hadley.nz/data-visualize)",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}
{
  "hash": "83dba18bbcdffcd7fc1c7cabc249ba1c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lab: Canonical Correlation Analysis\"\ndate: \"2025-03-27 17:56:10.567134\"\n\n\nformat:\n  html:\n    output-file: lab-cca.html\n  pdf:\n    output-file: lab-cca.pdf\n \nengine: knitr\n\nexecute: \n  eval: true\n  echo: true\n  collapse: true\n---\n\n\n\n\n\n\n::: {layout=\"[80,20]\"}\n\n::: {#first-column}\n\n|                            |\n|:---------------------------|\n| {{< var curriculum >}}     |\n| {{< var university >}}     |\n| Année {{< var year >}}     |\n| {{< var homepage >}}       |\n| {{< var moodle >}}         |\n\n\n::: \n\n::: {#second-column}\n![](/images/UniversiteParis_monogramme_couleur_RVB.png){align=\"right\" style=\"size:50px;\" width=75}\n:::\n\n:::\n\n\n\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: testthat\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: corrr\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: magrittr\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'magrittr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:testthat':\n\n    equals, is_less_than, not\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: lobstr\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: sloop\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: ggforce\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: ggplot2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: gt\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'gt'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:testthat':\n\n    matches\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: glue\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: skimr\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'skimr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:corrr':\n\n    focus\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:testthat':\n\n    matches\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: patchwork\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: tidyverse\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\nv dplyr     1.1.4     v readr     2.1.5\nv forcats   1.0.0     v stringr   1.5.1\nv lubridate 1.9.3     v tibble    3.2.1\nv purrr     1.0.4     v tidyr     1.3.1\n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx readr::edition_get()     masks testthat::edition_get()\nx magrittr::equals()       masks testthat::equals()\nx tidyr::extract()         masks magrittr::extract()\nx dplyr::filter()          masks stats::filter()\nx magrittr::is_less_than() masks testthat::is_less_than()\nx purrr::is_null()         masks testthat::is_null()\nx dplyr::lag()             masks stats::lag()\nx readr::local_edition()   masks testthat::local_edition()\nx dplyr::matches()         masks tidyr::matches(), skimr::matches(), gt::matches(), testthat::matches()\nx magrittr::not()          masks testthat::not()\nx purrr::set_names()       masks magrittr::set_names()\ni Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\nLoading required package: ggfortify\n\nLoading required package: viridisLite\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Canonical Correlation Analysis \n\n$$C(X,Y) = \\mathbb{E}\\left[X Y^\\top\\right]$$\n\n$$\\begin{bmatrix} C_{xx} & C_{xy} \\\\ C_{xy}^{\\top} & C_{yy}\\end{bmatrix}$$\n\n\n\n\n\nThe first canonical components are the solution of the next problem \n\n::: {.callout-note title=\"Optimization problem\"}\n\n$$\\begin{array}{lll}\\text{Maximize} & & u^\\top C_{xy}  v \\\\\\text{subject to} & & u^\\top C_{xx} uv=1 =v^\\top C_{yy} v     \\end{array}$$\n\n:::\n\n\n\n\n::: {.callout-note title=\"Proposition\"}\n\nLet \n\n$$U \\times D \\times V^\\top$$\n\nbe a SVD of \n\n$$C_{xx}^{-1/2} \\times C_{xy} \\times C_{yy}^{-1/2}$$\n\nThe solution to the optimization problem above is \n\n$$a = C_{xx}^{-1/2} u_1 \\qquad \\text{and} \\qquad b= S_{yy}^{-1/2} v_1$$\n\nwhere $u_1$ and $v_1$ are the leading left and right singular vectors of  $C_{xx}^{-1/2} \\times C_{xy} \\times C_{yy}^{-1/2}$, that is the first column vectors of $U$ and $V$.\n\n:::\n\n<!-- This is also related to the extended SVD of $C_{xy}$ relatively to $C_{xx}^{-1}$ and $C_{yy}^{-1}$ -->\n\nProof:  {{< fa chalkboard-teacher >}}\n\n::: {.callout-note title=\"Proposition\"}\n\nA sequence of canonical components of $C_{xy}$ can be obtained \nfrom the sequence of (extended) left and right singular vectors of $C_{xy}$ with respect \nto $C_{xx}$ and $C_{yy}$ \n\n:::\n\nProof:  {{< fa chalkboard-teacher >}}\n\n\n::: {.callout-note title=\"Proposition\"}\n\nLet $H_X$ (resp. $H_Y$) be orthorgonal projection matrix on the linear space spanned by the columns of $X$ (resp. $Y$).\n\nCanonical correlations $ρ_1 \\geq \\ldots \\geq \\rho_s, \\ldots$ are the positive\nsquare roots of the eigenvalues $\\lambda_1, \\ldots \\geq \\lambda_s, \\ldots$ of $H_X \\times H_Y$ \n(which are the same as $H_Y \\times H_X$): $ρ_s = λ_s$ \n\nVectors $U^1, \\ldots, U^{p_1}$  are the standardized eigenvectors corresponding to the decreasing\neigenvalues $λ_1 \\geq \\ldots \\geq \\lambda_{p_1}$  of $H_X  \\times H_Y$\n\nVectors $V^1, \\ldots, V^{p_2}$  are the standardized eigenvectors corresponding to the decreasing\neigenvalues $λ_1 \\geq \\ldots \\geq \\lambda_{p_2}$  of $H_X  \\times H_Y$\n\n\n:::\n\n\n\n## Canonical Correlation Analysis (CCA) in `R`\n\n###  `cancor()` from base package  `R`\n\nFunction `cancor(x, y, xcenter=T, ycenter=T)` computes the *canonical correlations* between two data matrices `x` and `y`.\nHenceforth we assume that the columns of `x` and `y` are centered.\nMatrices `x` and `y` have the same number $n$ of rows. `x` (resp. `y`) has `p1` (resp. `p2`) columns.\n\n> The canonical correlation analysis seeks linear combinations of the `y` variables which are *well explained* by linear combinations of the `x` variables. The relationship is symmetric as *well explained* is measured by correlations.\n\nThe result is a list of five  components \n\n- `cor`\t correlations.\n- `xcoef`\t estimated coefficients for the `x` variables.\n- `ycoef`\t estimated coefficients for the `y` variables.\n\nOur assumption above allows us to assume  `xcenter` and `ycenter` are zeros.\n\nThe next example is taken from the documentation. Use `?LiveCycleSavings` to get more information on the dataset.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nLifeCycleSavings |> \n  as_tibble() |>\n  slice_sample(n=5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 x 5\n     sr pop15 pop75   dpi  ddpi\n  <dbl> <dbl> <dbl> <dbl> <dbl>\n1 18.6   45.2  0.56  138.  5.14\n2  4.71  47.2  0.66  243.  5.08\n3 11.2   27.8  2.37 1681.  4.32\n4 10.8   47.6  1.14  471.  2.8 \n5  1.27  34.0  3.08 1900.  1.12\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfm1 <- lm(sr ~ pop15 + pop75 + dpi + ddpi, data = LifeCycleSavings)\n \nsummary(fm1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = sr ~ pop15 + pop75 + dpi + ddpi, data = LifeCycleSavings)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-8.2422 -2.6857 -0.2488  2.4280  9.7509 \n\nCoefficients:\n              Estimate Std. Error t value Pr(>|t|)    \n(Intercept) 28.5660865  7.3545161   3.884 0.000334 ***\npop15       -0.4611931  0.1446422  -3.189 0.002603 ** \npop75       -1.6914977  1.0835989  -1.561 0.125530    \ndpi         -0.0003369  0.0009311  -0.362 0.719173    \nddpi         0.4096949  0.1961971   2.088 0.042471 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 3.803 on 45 degrees of freedom\nMultiple R-squared:  0.3385,\tAdjusted R-squared:  0.2797 \nF-statistic: 5.756 on 4 and 45 DF,  p-value: 0.0007904\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npop <- LifeCycleSavings |> \n  dplyr::select(starts_with('pop'))\noec <- LifeCycleSavings |> \n  dplyr::select(-starts_with('pop'))\n  \nres.cca <- cancor(pop, oec)\n\nres.cca$cor\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.8247966 0.3652762\n```\n\n\n:::\n:::\n\n\n\n\n\n\nThis tells us that highest possible linear correlation beween a linear combination of `pop15, pop75` and a linear combination of \n`sr, dpi, ddpi` is `res.cca$cor[1]`. The coefficients of the \ncorresponding linear combinations can be found on the rows of \ncomponents `xcoef`  and `ycoef`\n\n::: {.callout-note title='Question'} \n \nCheck that the different components of the output of `cancor()` satisfy all \nproperties they should satisfy. \n\n:::\n\n::: {.content-visible when-profile='solution'} \n \n::: {.callout-tip title='Solution'} \n \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncc <- cor(\n  as.matrix(pop) %*% as.matrix(res.cca$xcoef), \n  as.matrix(oec) %*% as.matrix(res.cca$ycoef)\n  )\n\ndiag(cc) - res.cca$cor\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  2.220446e-16 -5.551115e-17\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n:::\n\n:::\n\n::: {.callout-note title='Question'} \n \nDesign a suite of tests (using `testthat`) that any contender of the implementation provided by package `stats` should pass.  \n \n:::\n\n\n::: {.content-visible when-profile='solution'} \n \n::: {.callout-tip title='Solution'} \n \nTODO\n\n:::\n\n:::\n\n### Package `CCA` \n\nAbstract of [CCA: An R Package to Extend Canonical Correlation Analysis](https://www.jstatsoft.org/article/view/v023i12)\n\n> Canonical correlations analysis (CCA) is an exploratory statistical method to highlight correlations between two data sets acquired on the same experimental units. The `cancor()` function in `R` (`R` Development Core Team 2007) performs the core of computations but further work was required to provide the user with additional tools to facilitate the interpretation of the results. \n\n\nAs in PCA, CA, MCA, several kinds of graphical representations can be displayed from the results of CCA: \n\n1. a barplot of the squared canonical correlations (which tells us about the low rank approximations of $H_X \\times H_Y$)\n1. scatter plots for the initial variables $X^j$ and $Y^k$ (ako correlation circles)\n1. scatter plots for the individuals (rows)\n1. biplots  \n  \n\n\n\n\n## Applications \n\n\n::: {.callout-note title='Question'} \n \n1. Load `nutrimouse` dataset from `CCA`.\n2. Insert the 4 elements of list `nutrimouse` in the global environment (see `list2env()`)\n\n\n:::\n\n::: {.content-visible when-profile='solution'} \n \n\n::: {.callout-tip title='Solution'} \n \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstopifnot(\n  require(CCA)\n)\n\ndata(\"nutrimouse\")\n\ne <- list2env(nutrimouse, .GlobalEnv)\n```\n:::\n\n\n\n\n\n \n::: \n \n:::\n\n::: {.callout-note title='Question'} \n \n- Compute the cross correlation matrix between `gene` and `lipid` \n- Visualize the cross correlation matrix\n  \n:::\n\n::: {.content-visible when-profile='solution'} \n\n::: {.callout-tip title='Solution'} \n \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nY <- as.matrix(gene)   # 40 x 120\nX <- as.matrix(lipid)  # 40 x 20\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nc_XY = corrr::correlate(cbind(X, Y))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nCorrelation computed with\n* Method: 'pearson'\n* Missing treated using: 'pairwise.complete.obs'\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nc_XY_long <- c_XY |>\n  tidyr::pivot_longer(cols=-c(term), names_to=\"term2\", values_to=\"cor\")  \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np  <- c_XY_long |>\n  dplyr::filter(\n    term %in% names(gene),\n    term2 %in% names(lipid)\n  ) |>\n  ggplot() +\n  aes(x=term2, y=term, fill=abs(cor)) +\n  geom_tile() +\n  scale_fill_viridis_c() +\n  xlab(\"diet\") +\n  ylab(\"gene\")\n\np |> plotly::ggplotly()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPhantomJS not found. You can install it with webshot::install_phantomjs(). If it is installed, please make sure the phantomjs executable can be found via the PATH variable.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nfile:////tmp/RtmpNZRDcb/file433ba1a69fa1f/widget433ba75cb99a9.html screenshot completed\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](lab-cca_files/figure-pdf/unnamed-chunk-6-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n\n\n\n::: \n \n:::\n\n\n::: {.callout-note title='Question'} \n \n- Compute the canonical correlations between `gene` and `lipid`, save the result in `res.cca` \n- Check the canonical correlations. \n- Comment\n \n:::\n\n::: {.content-visible when-profile='solution'} \n \n::: {.callout-tip title='Solution'} \n \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nres.cca <- cancor(as.matrix(gene), as.matrix(lipid))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(res.cca$cor)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 21\n```\n\n\n:::\n:::\n\n\n\n\n\n\n$H_X\\times H_Y$ has 21 eigenvalues   equal to $1$. As the subspaces defined by the columns \nin `gene` and `lipid` have dimensions at most `21` and `40`, $H_X\\times H_Y$ equals \nthe projection of $\\mathbb{R}^{40}$ over the smallest subspace. \n\n\n\n:::\n\n:::\n\n\n::: {.callout-note title='Question'} \n \nSample 10 columns from `gene` and `lipid` and repeat the operation \n \n:::\n\n::: {.content-visible when-profile='solution'} \n \n::: {.callout-tip title='Solution'} \n \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(42)\nn <- 10\n\nss_gene <- gene |>\n  dplyr::select(sample(names(gene),  n)) |>\n  scale()\n\nss_lipid<- lipid |>\n  dplyr::select(sample(names(lipid),  n)) |>\n  scale()\n\nres.cca <- cancor(as.matrix(ss_gene), as.matrix(ss_lipid)) \n\nres.cc <- cc(X=as.matrix(ss_gene), Y=as.matrix(ss_lipid))\n```\n:::\n\n\n\n\n\n::: \n:::\n\n::: {.callout-note title='Question'} \n \nScreeplot \n \n:::\n\n::: {.content-visible when-profile='solution'} \n \n::: {.callout-tip title='Solution'} \n \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nres.cca$cor |> \n  as_tibble() |>\n  gt::gt() |>\n  gt::fmt_scientific() |>\n  gt::tab_caption(\"Canonical correlations between `gene` columns of nutrimouse and  `lipid` columns\")\n```\n\n::: {.cell-output-display}\n\\begingroup\n\\fontsize{12.0pt}{14.4pt}\\selectfont\n\\begin{longtable}{r}\n\\toprule\nvalue \\\\ \n\\midrule\\addlinespace[2.5pt]\n9.62 $\\times$ 10\\textsuperscript{-1} \\\\ \n8.82 $\\times$ 10\\textsuperscript{-1} \\\\ \n7.90 $\\times$ 10\\textsuperscript{-1} \\\\ \n7.35 $\\times$ 10\\textsuperscript{-1} \\\\ \n6.96 $\\times$ 10\\textsuperscript{-1} \\\\ \n5.66 $\\times$ 10\\textsuperscript{-1} \\\\ \n5.09 $\\times$ 10\\textsuperscript{-1} \\\\ \n2.67 $\\times$ 10\\textsuperscript{-1} \\\\ \n1.58 $\\times$ 10\\textsuperscript{-1} \\\\ \n6.62 $\\times$ 10\\textsuperscript{-2} \\\\ \n\\bottomrule\n\\end{longtable}\n\\endgroup\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nres.cca$cor |> \n  as_tibble() |>\n  mutate(PC=as.factor(1:n), eig=value^2, percent=eig, cumulative=cumsum(eig)) |>\n  ggplot() +\n    aes(x=PC, y=eig, label=eig) +\n    geom_col(fill=\"white\", color=\"black\") +\n    theme_minimal() +\n    labs(\n      title=\"Squared Canonical Correlations\",\n      subtitle=\"sample of 10 genes and 10 lipids\", \n      caption=\"nutrimouse data\"\n    )\n```\n\n::: {.cell-output-display}\n![](lab-cca_files/figure-pdf/unnamed-chunk-11-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n\n\n\n::: \n:::\n\n::: {.callout-note title='Question'} \n \nBuild a correlation circle  \n \n:::\n\n\n::: {.content-visible when-profile='solution'} \n \n\n::: {.callout-tip title='Solution'} \n \n \n\n\nWe use function `plt.cc` from `CCA`. \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCCA::plt.cc(\n  res.cc, \n  var.label=T,\n  ind.names = str_c(genotype, diet, sep=\"-\")\n)\n```\n\n::: {.cell-output-display}\n![](lab-cca_files/figure-pdf/unnamed-chunk-12-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n\n:::\n\n:::\n\n\n## References \n\n[https://www.jstatsoft.org/article/view/v023i12](https://www.jstatsoft.org/article/view/v023i12)",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "\\usepackage{booktabs}\n\\usepackage{caption}\n\\usepackage{longtable}\n\\usepackage{colortbl}\n\\usepackage{array}\n\\usepackage{anyfontsize}\n\\usepackage{multirow}\n"
      ]
    },
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}